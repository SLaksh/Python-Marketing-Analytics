# -*- coding: utf-8 -*-
"""Outliers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ot2Pu5-uuGgD31RRhmL1cZV_rkUT6XcE
"""

import pandas as pd
import numpy as np
import plotly.express as px

"""**The plotly Python library is an interactive, open-source plotting library that supports over 40 unique chart types covering a wide range of statistical, financial, geographic, scientific, and 3-dimensional use-cases.**

**Loading the data**
"""

from google.colab import files
data = files.upload()

"""**Save the data as Dataframe using pandas**"""

df = pd.read_csv("/content/uber.csv")
# in Normal way it is df = pd.read_csv(‘uber.csv’)

#check the first 5 rows
df.head()

print(df.columns)

df.shape

#drop the unnecessary columns

df1 = df.drop(columns = ['pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude'])

df1.head()

"""**describe() **bold text** **to generate some summary statistics. 

Generating summary statistics is a quick way to help us determine whether or not the dataset has outliers. **
"""

df1.describe()[['fare_amount', 'passenger_count']]

"""# **Inference:**

1.   As we can see, the fare_amount and passenger_count columns have outliers.
2.    For example, the max fare_amount is 499 while its mean is 11.36. 
3.  The mean is sensitive to outliers, but the fact the mean is so small compared to the max value indicates the max value is an outlier. 
4. Similarly, the max passenger_count is 208 while the mean is 1.68.ist item.

# **Data visualization**

Use a px.histogram() to plot to review the fare_amount distribution.
"""

#create a histogram
fig = px.histogram(df1, x='fare_amount')
fig.show()

fig.update_layout(autosize=False, width=2500, height=500,)

"""**What is your Observtion?**

*   **Data is not following Normal distribution**
*    **Data is Skewed**

**Univariate Outliers- Box Plot**
"""

#create a box plot
fig1 = px.box(df1, y='fare_amount')
fig1.show()

fig1.update_layout(autosize=False, width=500, height=2500)

"""**Multivariate Outliers -Scatter plot**"""

fig3 = px.scatter(x=df1['passenger_count'], y=df1['fare_amount'])
fig3.show()

fig3.update_layout(autosize=False, width=4500, height=500)

"""**STATISTICAL METHODS**

**The "IQR" can be used with the "quartile" function of pandas**

**The Outliers are the data points that are the ones falling below Q1–1.5 IQR or above Q3 + 1.5 IQR.**

**Hence we define a Python function to find the Outliers**
"""

def find_outliers_IQR(df1):
   q1=df1.quantile(0.25)
   q3=df1.quantile(0.75)
   IQR=q3-q1
   outliers = df1[((df1<(q1-1.5*IQR)) | (df1>(q3+1.5*IQR)))]
   return outliers

"""**Now we run the above function for "Fare Amount"**"""

outliers = find_outliers_IQR(df1['fare_amount'])
print("number of outliers: "+ str(len(outliers)))
print("max outlier value: "+ str(outliers.max()))
print("min outlier value: "+ str(outliers.min()))
outliers

"""**First technique: Drop the Outliers**"""

def drop_outliers_IQR(df1):
   q1=df1.quantile(0.25)
   q3=df1.quantile(0.75)
   IQR=q3-q1
   not_outliers = df1[~((df1<(q1-1.5*IQR)) | (df1>(q3+1.5*IQR)))]
   outliers_dropped =outliers.dropna().reset_index()
   return outliers_dropped

"""**Third Technique : Impute with the values**"""

def impute_outliers_IQR(df1):
   q1=df1.quantile(0.25)
   q3=df1.quantile(0.75)
   IQR=q3-q1
   upper = df1[~(df1>(q3+1.5*IQR))].max()
   lower = df1[~(df1<(q1-1.5*IQR))].min()
   df1 = np.where(df1 > upper, df1.mean(), 
       np.where( df1 < lower, df1.mean(), df1)
       )
   return df1

"""**Passing values through the function**"""

df1['fare_amount'] = impute_outliers_IQR(df1['fare_amount'])
df1.describe()['fare_amount']