# -*- coding: utf-8 -*-
"""MBA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H9qBIkuPahHaQfe8eC3wNORzlTFOD6G7
"""

import numpy as np
import pandas as pd
from google.colab import files
uploaded = files.upload()

groceries = pd.read_csv("/content/Groceries_dataset.csv")
groceries.shape
(38765, 3)
groceries.head()

type(groceries)

"""**Checking for the missing values in the data types**"""

groceries.isna().sum().sum()

"""**Checking for the Data types**"""

groceries.dtypes

"""**There is no missing value but the data type of “Date” column should be converted to datetime which can be done with the to_datetime function of pandas**."""

groceries.Date = pd.to_datetime(groceries.Date)

"""**Checking for the average number of Items sold per day with GROUPBY **"""

import matplotlib.pyplot as plt
groceries[['Date','itemDescription']].groupby('Date').count()\
.plot(figsize=(12,6), legend=False, fontsize=14)
plt.title('Number of Items Sold per Day', fontsize=18)
plt.xlabel('Date',fontsize=14)
plt.ylabel('Qty', fontsize=14)

"""**Downsampling with RESAMPLE function**"""

groceries[['Date','itemDescription']].groupby('Date').count()\
.resample('M').mean()\
.plot(figsize=(12,6), legend=False, fontsize=14)
plt.title('Number of Items Sold per Day', fontsize=18)
plt.xlabel('Date',fontsize=14)
plt.ylabel('Qty', fontsize=14)

"""**Grouping the Items by Customer Number and date**"""

item_qty = groceries[['Member_number', 'Date','itemDescription']]\
.groupby(['Member_number','Date']).count().reset_index()
item_qty.head()

"""**The average item per shopping**"""

item_qty.itemDescription.mean()

"""**The distribution of the number of items per shopping**"""

item_qty.itemDescription.plot(figsize=(10,6), kind='hist',
                              legend=False, fontsize=14)
plt.title('Histogram of Item Quantities per Shopping', fontsize=18)

"""# **MARKET BASKET ANALYSIS**

** First we create a dataframe that contains the items list per shopping**
"""

items = groceries.groupby(['Member_number', 'Date'])\
.agg({'itemDescription': lambda x: x.ravel().tolist()}).reset_index()
items.head()

items.describe()

df = groceries.copy()
df.info()

Ser = df.groupby('Member_number').itemDescription.nunique()
Ser.describe()

bins = [5,10,15,20,25,30]
fig = plt.figure(figsize = (10,10))
plt.hist(Ser, bins, histtype = 'bar', rwidth = 0.5)
plt.xlabel('No. of items')
plt.ylabel('No. of transactions')
plt.show()

"""**Next, we have to determine which items frequently exist in the same rows in "ItemDescription"**

**One way is to create combinations of items in each row and count the occurrences of each combination. This can be done with the help of "itertools" of Python**
"""

import itertools
list(itertools.combinations(items.itemDescription[0], 2))

"""**As we have 3 items in the first item we get the above combinations**

**But, Itertools.combinations do not return repeated combinations (e.g. (‘pastry’, ‘pastry’)) which is what we need**
"""

combinations_list = []
for row in items.itemDescription:
    combinations = list(itertools.combinations(row, 2))
    combinations_list.append(combinations)

combinations_list[:2]

"""**The above code is a LIst of List**

**We have to now convert it to a Series**
"""

combination_counts = pd.Series(combinations_list).explode().reset_index(drop=True)

combination_counts[:5]

"""**Now we count the combinations with the counts() function**"""

combination_counts.value_counts()[:10]

whole_milk = groceries[groceries.itemDescription == 'whole milk']\
.groupby(['Member_number','Date']).count()\
.sort_values(by='itemDescription', ascending=False).reset_index()
whole_milk.head()